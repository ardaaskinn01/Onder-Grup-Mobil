{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "My API",
    "description": "API for managing machines, users, and maintenance."
  },
  "host": "85.95.231.92:3000",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/uploadFile": {
      "post": {
        "summary": "Upload a file to MinIO storage",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "type": "file",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "File uploaded successfully"
          },
          "500": {
            "description": "Failed to upload file"
          }
        }
      }
    },
    "/downloadFile": {
      "get": {
        "summary": "Download a file from MinIO storage",
        "produces": ["application/octet-stream"],
        "parameters": [
          {
            "name": "filename",
            "in": "query",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "File downloaded successfully"
          },
          "500": {
            "description": "Failed to download file"
          }
        }
      }
    },
    "/registerUser": {
      "post": {
        "summary": "Register a new user",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": { "type": "string" },
                "email": { "type": "string" },
                "username": { "type": "string" },
                "password": { "type": "string" },
                "role": { "type": "string" }
              },
              "required": ["name", "email", "username", "password"]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User registered successfully"
          },
          "400": {
            "description": "All fields are required"
          },
          "500": {
            "description": "Failed to register user"
          }
        }
      }
    },
    "/login": {
      "post": {
        "summary": "User login",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "email": { "type": "string" },
                "password": { "type": "string" }
              },
              "required": ["email", "password"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login successful",
            "schema": {
              "type": "object",
              "properties": {
                "token": { "type": "string" }
              }
            }
          },
          "400": {
            "description": "Email and password are required"
          },
          "401": {
            "description": "Invalid email or password"
          },
          "500": {
            "description": "Failed to login"
          }
        }
      }
    },
    "/changePassword": {
      "post": {
        "summary": "Change user password",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "newPassword": { "type": "string" }
              },
              "required": ["newPassword"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password changed successfully"
          },
          "400": {
            "description": "Missing newPassword"
          },
          "401": {
            "description": "Token missing or invalid"
          },
          "500": {
            "description": "Failed to change password"
          }
        }
      }
    },
    "/updateUserProfile": {
      "post": {
        "summary": "Update user profile",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": { "type": "string" },
                "username": { "type": "string" }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Profile updated successfully"
          },
          "401": {
            "description": "Token missing or invalid"
          },
          "500": {
            "description": "Failed to update user profile"
          }
        }
      }
    },
    "/getUserProfile": {
      "get": {
        "summary": "Get user profile",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "id": { "type": "integer" },
                "name": { "type": "string" },
                "email": { "type": "string" },
                "username": { "type": "string" },
                "role": { "type": "string" }
              }
            }
          },
          "401": {
            "description": "Token missing or invalid"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Failed to fetch user profile"
          }
        }
      }
    },
    "/addMachine": {
      "post": {
        "summary": "Add a new machine",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "machineName": { "type": "string" },
                "machineID": { "type": "string" },
                "machineType": { "type": "string" },
                "ownerUser": { "type": "string" }
              },
              "required": ["machineName", "machineID", "machineType", "ownerUser"]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Machine added successfully",
            "schema": {
              "type": "object",
              "properties": {
                "machineId": { "type": "integer" }
              }
            }
          },
          "400": {
            "description": "All fields are required"
          },
          "500": {
            "description": "Failed to add machine"
          }
        }
      }
    },
    "/getMachines": {
      "get": {
        "summary": "Get list of machines",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "List of machines retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "machineName": { "type": "string" },
                  "machineID": { "type": "string" },
                  "machineType": { "type": "string" },
                  "ownerUser": { "type": "string" }
                }
              }
            }
          },
          "500": {
            "description": "Failed to get machines"
          }
        }
      }
    },
    "/getMachineDetails": {
      "get": {
        "summary": "Get details of a machine",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "machineID",
            "in": "query",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Machine details retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                // Define properties based on your database schema
              }
            }
          },
          "400": {
            "description": "Missing machineID parameter"
          },
          "404": {
            "description": "Machine not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/deleteMachine": {
      "delete": {
        "summary": "Delete a machine",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "machineName",
            "in": "query",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Machine and its subcollections deleted successfully"
          },
          "400": {
            "description": "Missing machineName parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/getMaintenanceData": {
      "get": {
        "summary": "Get maintenance data for a machine",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "machineID",
            "in": "query",
            "type": "string",
            "required": true
          },
          {
            "name": "maintenanceId",
            "in": "query",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Maintenance data retrieved successfully",
            "schema": {
              // Define schema based on your database structure
            }
          },
          "400": {
            "description": "Missing machineID or maintenanceId parameter"
          },
          "404": {
            "description": "Maintenance not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/addMaintenance": {
      "post": {
        "summary": "Add maintenance record for a machine",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "machineID": { "type": "string" },
                "maintenanceId": { "type": "string" },
                "maintenanceDate": { "type": "string", "format": "date-time" },
                "maintenanceStatuses": { "type": "array", "items": { "type": "string" } },
                "notes": { "type": "string" }
              },
              "required": ["machineID", "maintenanceId", "maintenanceDate"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Maintenance added successfully",
            "schema": {
              "type": "object",
              "properties": {
                "maintenanceId": { "type": "integer" }
              }
            }
          },
          "400": {
            "description": "All fields are required"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/getMaintenanceRecords": {
      "get": {
        "summary": "Get maintenance records for a machine",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "machineID",
            "in": "query",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Maintenance records retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                // Define schema based on your database structure
              }
            }
          },
          "400": {
            "description": "Missing machineID parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/getRole": {
      "get": {
        "summary": "Get user role by email",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "uid",
            "in": "query",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User role retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "role": { "type": "string" }
              }
            }
          },
          "400": {
            "description": "Missing UID parameter"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/getErrorRecords": {
      "get": {
        "summary": "Get error records for a machine",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "machineName",
            "in": "query",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Error records retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                // Define schema based on your database structure
              }
            }
          },
          "400": {
            "description": "Missing machineName parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  }
}
